<% pget = salt['pillar.get'] %>
# /etc/adduser.conf: `adduser' configuration.
# See adduser(8) and adduser.conf(5) for full documentation.

# The DSHELL variable specifies the default login shell on your
# system.
DSHELL=${pget('adduser:dshell', '/bin/bash')}

# The DHOME variable specifies the directory containing users' home
# directories.
DHOME=${pget('adduser:dhome', '/home')}

# If GROUPHOMES is "yes", then the home directories will be created as
# /home/groupname/user.
GROUPHOMES=${pget('adduser:grouphomes', 'no')}

# If LETTERHOMES is "yes", then the created home directories will have
# an extra directory - the first letter of the user name. For example:
# /home/u/user.
LETTERHOMES=${pget('adduser:letterhomes', 'no')}

# The SKEL variable specifies the directory containing "skeletal" user
# files; in other words, files such as a sample .profile that will be
# copied to the new user's home directory when it is created.
SKEL=${pget('adduser:skel', '/etc/skel')}

# FIRST_SYSTEM_[GU]ID to LAST_SYSTEM_[GU]ID inclusive is the range for UIDs
# for dynamically allocated administrative and system accounts/groups.
# Please note that system software, such as the users allocated by the base-passwd
# package, may assume that UIDs less than 100 are unallocated.
FIRST_SYSTEM_UID=${pget('adduser:first_system_uid', 100)}
LAST_SYSTEM_UID=${pget('adduser:last_system_uid', 999)}

FIRST_SYSTEM_GID=${pget('adduser:first_system_gid', 100)}
LAST_SYSTEM_GID=${pget('adduser:last_system_gid', 999)}

# FIRST_[GU]ID to LAST_[GU]ID inclusive is the range of UIDs of dynamically
# allocated user accounts/groups.
FIRST_UID=${pget('adduser:first_uid', 1000)}
LAST_UID=${pget('adduser:last_uid', 29999)}

FIRST_GID=${pget('adduser:first_gid', 1000)}
LAST_GID=${pget('adduser:last_gid', 29999)}

# The USERGROUPS variable can be either "yes" or "no".  If "yes" each
# created user will be given their own group to use as a default.  If
# "no", each created user will be placed in the group whose gid is
# USERS_GID (see below).
USERGROUPS=${pget('adduser:usergroups', 'yes')}

# If USERGROUPS is "no", then USERS_GID should be the GID of the group
# `users' (or the equivalent group) on your system.
USERS_GID=${pget('adduser:users_gid', 100)}

# If DIR_MODE is set, directories will be created with the specified
# mode. Otherwise the default mode 0755 will be used.
DIR_MODE=${pget('adduser:dir_mode', '0755')}

# If SETGID_HOME is "yes" home directories for users with their own
# group the setgid bit will be set. This was the default for
# versions << 3.13 of adduser. Because it has some bad side effects we
# no longer do this per default. If you want it nevertheless you can
# still set it here.
SETGID_HOME=${pget('adduser:setgid_home', 'no')}

# If QUOTAUSER is set, a default quota will be set from that user with
# `edquota -p QUOTAUSER newuser'
QUOTAUSER="${pget('adduser:quotauser', '')}"

# If SKEL_IGNORE_REGEX is set, adduser will ignore files matching this
# regular expression when creating a new home directory
SKEL_IGNORE_REGEX="dpkg-(old|new|dist|save)"

# Set this if you want the --add_extra_groups option to adduser to add
# new users to other groups.
# This is the list of groups that new non-system users will be added to
# Default:
#EXTRA_GROUPS="dialout cdrom floppy audio video plugdev users"
<% key = 'extra_groups' %>
%if pillar['adduser'].has_key(key):
<% value = ' '.join(pget('adduser:extra_groups')) %>
${key.upper()}=${value}
%endif

# If ADD_EXTRA_GROUPS is set to something non-zero, the EXTRA_GROUPS
# option above will be default behavior for adding new, non-system users
#ADD_EXTRA_GROUPS=1
<% key = 'add_extra_groups' %>
<% value = pget('adduser:%s' % key) %>
%if value is not None:
${key.upper()}=${value}
%endif

# check user and group names also against this regular expression.
#NAME_REGEX="^[a-z][-a-z0-9_]*\$"
<% key = 'name_regex' %>
<% value = pget('adduser:%s' % key) %>
%if value is not None:
${key.upper()}="${value}"
%endif
